package engine.view.gui;

import engine.view.*;
import engine.view.Canvas;

import javax.swing.*;
import java.awt.*;

/**
 * The DebugView is an implementation of the View that displays a canvas, as well as a scrollable text output and
 * an input field. As such, it can function both as a TUI and a GUI.
 * Created by thomas on 4-2-17.
 */
public abstract class DebugView extends View {

    /**
     * The Canvas object that will be painted continuously
     */
    private Canvas canvas;

    /**
     * The containter for all other components in the window
     */
    private JPanel rootPanel;

    /**
     * The text area where debug output will be printed
     */
    private JTextArea outputConsole;

    /**
     * The text field where debug commands can be entered
     */
    private JTextField textField;

    /**
     * A button that has the same effect as pressing enter in the text field
     */
    private JButton button;

    /**
     * The constructor calls View's constructor to set the window's title, then passes the canvas object to the
     * superclass, so that it can use the reference to let it repaint continuously. After that, it calls super::init,
     * so it can finish setting up. It also sets the content pane to the root pane that is created by IntelliJ IDEA's
     * GUI creator, so that its contents, including the canvas, are displayed in the window.
     * @param windowTitle
     */
    public DebugView(String windowTitle) {
        super(windowTitle);

        setCanvas(canvas);
        setContentPane(rootPanel);

        init();
    }

    /**
     * Implementation of the abstract println method. It prints the debug output to the console in the window, below
     * the canvas.
     * @param debugOutput
     */
    @Override
    public void println(String debugOutput) {
        outputConsole.append(debugOutput + "\n");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        canvas = new Canvas();
        rootPanel.add(canvas, BorderLayout.CENTER);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(panel1, BorderLayout.SOUTH);
        button = new JButton();
        button.setText("Button");
        panel1.add(button, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField = new JTextField();
        panel1.add(textField, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 400), null, 0, false));
        outputConsole = new JTextArea();
        scrollPane1.setViewportView(outputConsole);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    //TODO convert all generated GUI

}